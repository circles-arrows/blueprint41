<#@ template language="C#" inherits="GenerationBase" visibility="internal" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Blueprint41.Modeller.Schemas" #>

<# foreach (var functionalId in FunctionalIds)
{
#>
<#
    if(functionalId.IsDefault == true)
    {
#>
    FunctionalIds.Default = FunctionalIds.New("<#=functionalId.Name #>", "<#=functionalId.Value #>", IdFormat.<#=functionalId.Type #>, 0);
<# 
    } else {
#>
    FunctionalIds.New("<#=functionalId.Name #>", "<#=functionalId.Value #>", IdFormat.<#=functionalId.Type #>, 0);
<#        
   } // end of else
#>
<# 
} // end of foreach functional id
#>


<#
foreach (var entity in Entities)
{
    if(string.IsNullOrEmpty(entity.Inherits))
    {
        if (string.IsNullOrEmpty(entity.FunctionalId))
        {
#>
    Entities.New("<#=entity.Name #>")
<#
        } 
        else 
        {
            var ids = FunctionalIds.Where(x => x.Guid == entity.FunctionalId && x.IsDefault == false).ToList();
            string entityFunctionalId = ids.Count > 0 ? ", FunctionalIds[\"" + ids.First().Name + "\"]" : "";
#>
    Entities.New("<#=entity.Name #>"<#=entityFunctionalId#>)
<#
        }
    }
    else
    {
		Entity inheritedEntity = Modeller.Model.Entities.Entity.Where(x => x.Guid == entity.Inherits).First();
        string inheritedEntityName = inheritedEntity.Name;
        if(string.IsNullOrEmpty(entity.FunctionalId))
        {
#>
    Entities.New("<#=entity.Name #>", Entities["<#=inheritedEntityName#>"])
<#
        }
        else
        {
            var ids = FunctionalIds.Where(x => x.Guid == entity.FunctionalId && x.IsDefault == false).ToList();
			string entityFunctionalId = ids.Count > 0 ? "FunctionalIds[\"" + ids.First().Name + "\"], " : "";

			if(!string.IsNullOrEmpty(entity.FunctionalId) && !string.IsNullOrEmpty(inheritedEntity.FunctionalId))
			{
				if(entity.FunctionalId == inheritedEntity.FunctionalId)
				{
					entityFunctionalId = "";
				}
			}
#>
    Entities.New("<#=entity.Name #>", <#=entityFunctionalId#>Entities["<#= inheritedEntityName #>"])
<#				
        }
        if(!string.IsNullOrEmpty(entity.Summary))
        {
#>
        .Summary("<#= entity.Summary.Replace("\"", "\\\"")#>")
<#
        }
    }
    if(entity.Abstract)
    {
#>
        .Abstract(true)
<#
    }
    if(entity.Virtual)
    {
#>
        .Virtual(true)
<#
    }
	if (entity.IsStaticData)
	{
#>
        .HasStaticData(true)
<#
	}
    foreach (var primitive in entity.Primitive)
    {
        if(!string.IsNullOrEmpty(primitive.Index) && !primitive.Index.Equals("None"))
        {
#>
        .AddProperty("<#=primitive.Name#>", typeof(<#=primitive.Type#>), <#=!primitive.Nullable?"false,":""#> IndexType.<#=primitive.Index#>)
<#
        }
        else
        {
#>
        .AddProperty("<#=primitive.Name#>", typeof(<#=primitive.Type ?? "" #>)<#= !primitive.Nullable?", false":""#>)
<#
        }
        if(primitive.IsKey)
        {
#>
        .SetKey("<#=primitive.Name#>", true)
<#
        }
    } // end of foreach primitive
    Write(string.Join($"{Environment.NewLine}", entity.Primitive.Where(x => x.IsFullTextProperty == true).Select(x =>".SetFullTextProperty(\""+ x.Name+"\")").ToList()));
    GenerationEnvironment = TrimEnd(GenerationEnvironment);
    Write(";\r\n\r\n");
#>
<#
} // end foreach entities
foreach (var relationship in Relationships)
{
    bool hasRelationshipSourceName = string.IsNullOrEmpty(relationship.Source.Name);
    bool hasRelationshipTargetName = string.IsNullOrEmpty(relationship.Target.Name);

    string postfix = hasRelationshipTargetName ? ";" : "";
    if(string.IsNullOrEmpty(relationship.Name))
    {
#>

    Relations.New(Entities["<#=relationship.Source.Label#>"], <#=relationship.Target.Label != null ? $"Entities[\"{relationship.Target.Label}\"]" : "null" #>, <#=relationship.Type#>)
<#
    }
    else
    {
#>

    Relations.New(Entities["<#=relationship.Source.Label#>"], <#=relationship.Target.Label != null ? $"Entities[\"{relationship.Target.Label}\"]" : "null"#>, "<#=relationship.Name#>", "<#=relationship.Type#>")
<#
    }
    if(!hasRelationshipSourceName)
    {
        if(relationship.Source.Nullable)
            {
#>
        .SetInProperty("<#=relationship.Source.Name#>", PropertyType.<#=relationship.Source.Type#>)<#=postfix#>
<#
			}
			else
            {
#>
        .SetInProperty("<#=relationship.Source.Name#>", PropertyType.<#=relationship.Source.Type#>, <#=relationship.Source.Nullable.ToString().ToLower()#>)<#=postfix#>
<#
            }
    }
    if(!hasRelationshipTargetName)
    {
        if(relationship.Target.Nullable)
        {
#>
        .SetOutProperty("<#=relationship.Target.Name#>", PropertyType.<#=relationship.Target.Type#>);
<#
        }
		else
        {
#>
        .SetOutProperty("<#=relationship.Target.Name#>", PropertyType.<#=relationship.Target.Type#>, <#=relationship.Target.Nullable.ToString().ToLower()#>);
<#
        }
    }
    else
    {
    }
} // end of foreach entities
#>

<#
foreach (var entity in Entities.Where(x => x.StaticData != null && x.StaticData?.Records.Record.Count > 0))
{
	foreach(var record in entity.StaticData.Records.Record)
	{
		var allProperties = new List<Primitive>();
		Entity current = entity;
		do
		{
			allProperties.AddRange(current.Primitive);
			current = current.ParentEntity;
		} while (current != null);
		var primitiveRecords = record.Property.Where(r => allProperties.Any(p => p.Guid == r.PropertyGuid));
#>    Entities["<#=entity.Name#>"].Refactor.CreateNode(new {<#
		for(int index = 0; index < primitiveRecords.Count(); index++)
		{
			var prop = primitiveRecords.ElementAt(index);
			string comma = index == primitiveRecords.Count() - 1 ? " " : ",";
			var primitive = allProperties.Where(p => p.Guid == prop.PropertyGuid).FirstOrDefault();#> <#=primitive.Name#> = "<#=prop.Value.Replace("\"","\\\"")#>"<#= comma #><#
		}
#>});
<#
	}
#>

<#
} // end foreach entities
#>