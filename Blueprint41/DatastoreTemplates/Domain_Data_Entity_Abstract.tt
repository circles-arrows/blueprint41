<#@ template language="C#" inherits="GeneratorBase" visibility="public" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ includeForIntellisenseOnly processor="tangibleT4Editor" file="$(ProjectDir)DatastoreTemplates\Generator.ttinclude" #>
using System;
using System.Linq;
using System.Collections.Generic;


using Blueprint41;
using Blueprint41.Core;
using Blueprint41.Query;
using Blueprint41.DatastoreTemplates;
using q = <#= Settings.FullQueryNamespace #>;

namespace <#= Settings.FullCRUDNamespace #>
{
<#
if (DALModel.IsAbstract)
{
#>
	public interface I<#= DALModel.Name #>OriginalData<#= DALModel.Inherits == null ? "" : string.Concat(" : I", DALModel.Inherits.Name, "OriginalData") #>
    {
<#
	foreach (Property attr in DALModel.Properties)
	{
		if (attr.IsKey)
		{
#>
		<#= attr.OuterReturnTypeReadOnly  #> <#= attr.Name #> { get; }
<#
		}
		else if (attr.PropertyType == PropertyType.Collection || attr.IsNodeType)
		{
#>
		<#= attr.OuterReturnTypeReadOnly  #> <#= attr.Name #> { get; }
<#
			if (attr.EntityReturnType != null && attr.EntityReturnType.IsAbstract)
			{
				foreach (Entity concrete in attr.EntityReturnType.GetSubclasses())
				{
					string concreteOuterType = string.Concat("IEnumerable<", concrete.ClassName, ">");
#>
		<#= concreteOuterType  #> <#= attr.Name #>_<#= concrete.Name #> { get; }
<#
				}
			}
		}
		else if (attr.PropertyType == PropertyType.Lookup)
		{
			if (attr.Relationship.IsTimeDependent)
			{
#>
		<#= attr.OuterReturnTypeReadOnly #> <#= attr.Name #> { get; }
<#
			}
			else
			{
#>
		<#= attr.OuterReturnTypeReadOnly #> <#= attr.Name #> { get; }
<#
			}
		}
		else
		{
#>
		<#= attr.OuterReturnTypeReadOnly  #> <#= attr.Name #> { get; }
<#
		}
	}

	if (!string.IsNullOrEmpty(DALModel.UnidentifiedProperties))
	{
#>
        
		#region Member for UnidentifiedProperties

        IDictionary<string, object> <#= DALModel.UnidentifiedProperties #> { get; }

        #endregion
<#
	}
#>
    }

	public partial interface <#= DALModel.ClassName #> : OGM<#= string.Join("", DALModel.GetBaseTypes().Where(item => item.IsAbstract).Select(item => string.Concat(", ", item.ClassName)).ToArray()) #>
	{
<#
	if((object)DALModel.NodeType == null && DALModel.GetBaseTypes().Count == 0)
    {
#>
		string <#= DALModel.NodeTypeName #> { get; }
<#
	}

	foreach (Property attr in DALModel.Properties)
	{
		if (attr.PropertyType == PropertyType.Collection || attr.IsNodeType)
		{
#>
		<#= attr.OuterReturnType #> <#= attr.Name #> { get; }
<#
		}
		else
		{
			string accessors = (attr.HideSetter) ? "get;" : "get; set;";
#>
		<#= attr.OuterReturnType #> <#= attr.Name #> { <#= accessors #> }
<#
			if (attr.PropertyType == PropertyType.Lookup && attr.Relationship.IsTimeDependent)
			{
#>
		<#= attr.OuterReturnType #> Get<#= attr.Name #>(DateTime? moment = null);
		void Set<#= attr.Name #>(<#= attr.OuterReturnType #> value, DateTime? moment = null);
<#
			}
		}
	}
#>

		<#= DALModel.Inherits == null ? "" : "new " #>I<#= DALModel.Name #>OriginalData OriginalVersion { get; }
	}

	public partial class <#= DALModel.Name #> : OGMAbstractImpl<<#= DALModel.Name #>, <#= DALModel.ClassName #>, <#= DALModel.Key.SystemReturnType #>>
	{
        #region Initialize

		static <#= DALModel.Name #>()
        {
            Register.Types();
        }

        protected override void RegisterGeneratedStoredQueries()
        {
<#
    if (!DALModel.IsVirtual)
    {
#>
            #region LoadByKeys
            
            RegisterQuery(nameof(LoadByKeys), (query, alias) => query.
                Where(alias.<#= DALModel.Key.Name #>.In(Parameter.New<<#= DALModel.Key.SystemReturnType #>>(Param0))));

            #endregion

<#
    }
#>
			AdditionalGeneratedStoredQueries();
        }
		partial void AdditionalGeneratedStoredQueries();
<#
    if (!DALModel.IsVirtual)
    {
#>
        
        public static Dictionary<<#= DALModel.Key.SystemReturnType #>, <#= DALModel.ClassName #>> LoadByKeys(IEnumerable<<#= DALModel.Key.SystemReturnType #>> <#= DALModel.Key.Name.ToPlural().ToCamelCase() #>)
        {
            return FromQuery(nameof(LoadByKeys), new Parameter(Param0, <#= DALModel.Key.Name.ToPlural().ToCamelCase() #>.ToArray(), typeof(<#= DALModel.Key.SystemReturnType #>))).ToDictionary(item=> item.<#= DALModel.Key.Name #>, item => item);
        }

		protected static void RegisterQuery(string name, Func<IMatchQuery, q.<#= DALModel.Name #>Alias, IWhereQuery> query)
        {
            q.<#= DALModel.Name #>Alias alias;

            IMatchQuery matchQuery = Blueprint41.Transaction.CompiledQuery.Match(q.Node.<#= DALModel.Name #>.Alias(out alias));
            IWhereQuery partial = query.Invoke(matchQuery, alias);
            ICompiled compiled = partial.Return(alias).Compile();

			RegisterQuery(name, compiled);
        }
<#
    }
#>

		#endregion

        private static <#= DALModel.ClassName #>Members members = null;
        public static <#= DALModel.ClassName #>Members Members
        {
            get
            {
                if (members == null)
                {
                    lock (typeof(<#= DALModel.ClassName #>))
                    {
                        if (members == null)
                            members = new <#= DALModel.ClassName #>Members();
                    }
                }
                return members;
            }
        }
        public class <#= DALModel.ClassName #>Members
        {
            internal <#= DALModel.ClassName #>Members() { }

<#
	foreach (Entity inherited in DALModel.GetBaseTypesAndSelf())
	{
#>
			#region Members for interface I<#= inherited.Name #>

<#
		foreach (Property attr in inherited.Properties)
		{
#>
            public Property <#= attr.Name #> { get; } = <#= Datastore.GetType().FullName #>.Model.Entities["<#= inherited.Name #>"].Properties["<#= attr.Name #>"];
<#
		}
#>
			#endregion

<#
	}
#>
        }
<#
    var enumProperties = DALModel.Properties.Where(item => item.EnumValues != null).ToList();

    if (enumProperties.Count != 0)
    {
#>

        #region Enumerations

<#
		foreach (Property attr in enumProperties)
		{
			if (attr.EnumValues == null)
                continue;
#>
        public enum <#= attr.Name #>Enum
        {
<#
            foreach (string value in attr.EnumValues)
            {
#>
            <#= value #>,
<#
            }
#>
        }

<#
        }
#>
        #endregion
<#
    }
#>

		sealed public override Entity GetEntity()
        {
            if (entity == null)
            {
                lock (typeof(<#= DALModel.ClassName #>))
                {
                    if (entity == null)
                        entity = <#= Datastore.GetType().FullName #>.Model.Entities["<#= DALModel.Name #>"];
                }
            }
            return entity;
        }
	}
<#
}
#>
}
