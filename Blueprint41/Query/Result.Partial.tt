<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
	var listTypes = new []
	{
		( listType: "MiscListResult",     resultType: "MiscResult",     underlyingType: "object"   ),
		( listType: "StringListResult",   resultType: "StringResult",   underlyingType: "string"   ),
		( listType: "BooleanListResult",  resultType: "BooleanResult",  underlyingType: "bool"     ),
		( listType: "DateTimeListResult", resultType: "DateTimeResult", underlyingType: "DateTime" ),
		( listType: "FloatListResult",    resultType: "FloatResult",    underlyingType: "double"   ),
		( listType: "NumericListResult",  resultType: "NumericResult",  underlyingType: "long"     ),
	};
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;

using Blueprint41.Neo4j.Model;

namespace Blueprint41.Query
{
<#
	foreach ((string listType, string resultType, string underlyingType) in listTypes)
	{
#>
	public partial class <#= resultType #> : FieldResult<<#= resultType #>, <#= listType #>, <#= underlyingType #>>, IPlainPrimitiveResult
	{
		internal <#= resultType #>(FieldResult field) : base(field) { }
		public <#= resultType #>(Func<QueryTranslator, string?>? function, object[]? arguments, Type? type) : base(function, arguments, type) { }
		public <#= resultType #>(AliasResult alias, string? fieldName, IEntity? entity, Property? property, Type? overridenReturnType = null) : base(alias, fieldName, entity, property, overridenReturnType) { }
		public <#= resultType #>(AliasResult alias, Func<QueryTranslator, string?>? function, object[]? arguments = null, Type? type = null) : base(alias, function, arguments, type) { }
		public <#= resultType #>(FieldResult field, Func<QueryTranslator, string?>? function, object[]? arguments = null, Type? type = null) : base(field, function, arguments, type) { }

		public AsResult As(string aliasName, out <#= resultType #> alias)
		{
			AliasResult aliasResult = new AliasResult(this, null)
			{
				AliasName = aliasName
			};

			alias = new <#= resultType #>(aliasResult, null, null, null, this.GetResultType() ?? typeof(<#= underlyingType #>));
			//alias = new <#= resultType #>(aliasResult, null, null, null, typeof(<#= underlyingType #>));
			return this.As(aliasName);
		}
		AsResult IResult.As<T>(string aliasName, out T alias)
		{
			AsResult retval = As(aliasName, out <#= resultType #> genericAlias);
			alias = (T)(object)genericAlias;
			return retval;
		}
	}
<#
	}
#>
}