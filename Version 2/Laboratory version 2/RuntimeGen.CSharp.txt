
using System;
using System.Linq;
using System.Collections.Generic;
using System.Reflection;

using neo4j = Neo4j.Driver;
using bp41 = Blueprint41.Driver;

namespace Blueprint41.Driver.RuntimeGeneration
{
    public sealed class ServerAddressResolverProxy : neo4j.IServerAddressResolver
    {
        private ServerAddressResolverProxy(bp41.ServerAddressResolver resolver)
        {
            _instance = resolver;
        }
        public static ServerAddressResolverProxy Get(bp41.ServerAddressResolver resolver)
        {
            return new ServerAddressResolverProxy(resolver);
        }
        private bp41.ServerAddressResolver _instance;

        public ISet<neo4j.ServerAddress>? Resolve(neo4j.ServerAddress address)
        {
            bp41.ServerAddress[]? intermediate = _instance.Resolve(new ServerAddress(address))?.ToArray();
            if (intermediate == null)
                return null;

            HashSet<neo4j.ServerAddress> result = new HashSet<neo4j.ServerAddress>();
            for (int index = 0; index < intermediate.Length; index++)
                result.Add((neo4j.ServerAddress)intermediate[index]._instance);

            return result;
        }
    }

    public sealed class LoggerProxy : neo4j.ILogger
    {
        private LoggerProxy(bp41.ILogger logger)
        {
            _instance = logger;
        }
        public static LoggerProxy Get(bp41.ILogger logger)
        {
            return new LoggerProxy(logger);
        }
        private bp41.ILogger _instance;


        public void Debug(string message, params object[] args)
        {
            _instance.Debug(message, args);
        }
        public void Error(Exception cause, string message, params object[] args)
        {
            _instance.Error(cause, message, args);
        }
        public void Info(string message, params object[] args)
        {
            _instance.Info(message, args);
        }
        public bool IsDebugEnabled()
        {
            return _instance.IsDebugEnabled();
        }
        public bool IsTraceEnabled()
        {
            return _instance.IsTraceEnabled();
        }
        public void Trace(string message, params object[] args)
        {
            _instance.Trace(message, args);
        }
        public void Warn(Exception cause, string message, params object[] args)
        {
            _instance.Warn(cause, message, args);
        }
    }
}